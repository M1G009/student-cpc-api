#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var Faculty = require('../Model/Faculty')
var Student = require('../Model/Student')
var debug = require('debug')('api:server');
const cors = require("cors");
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const { Server } = require("socket.io");
const io = new Server(server, {
  cors: {
    origin: ["http://localhost:3000", "http://localhost:3001"],
  }
});










// ---------------------------------------------------------------------------------SOCKET CODE----------------------------------------

io.on('connection', (socket) => {
  // console.log(socket);



  // -----------------------------------------------------------------------------Message Recievers Id---------------------------

  socket.on('id', async (toid) => {
    let toId = JSON.parse(toid)
    let facultyDetails = await Faculty.findById(toId)
    if (facultyDetails) {
      Faculty.findById(toId).then((results) => {
        socket.emit('pre-chat', results)
      })
    }
    else {
      Student.findById(toId).then((results) => {
        socket.emit('pre-chat', results)
      })
    }
    // console.log("Data Collected");
  })



  // -----------------------------------------------------------------------------All Process When Chat Is Sent-----------------------------

  socket.on('chat message', async (msg, id, toid, name) => {
    let details = {}
    details.message = msg
    details.from = name
    let userId = JSON.parse(id)
    let toId = JSON.parse(toid)



    // ------------------------------------------------------------------------------Update Code---------------------------------------------

    let studentupdate = await Student.findByIdAndUpdate(toId, { $push: { chats: details } });
    if (!studentupdate) {
      await Faculty.findByIdAndUpdate(toId, { $push: { chats: details } })
    }
    let facultyUpdate = await Faculty.findByIdAndUpdate(userId, { $push: { chats: details } })
    if (!facultyUpdate) {
      await Student.findByIdAndUpdate(userId, { $push: { chats: details } })
    }


    // ------------------------------------------------------------------------------Emit Previos Chat Code-----------------------------

    let facultyDetails = await Faculty.findById(toId)
    if (facultyDetails) {
      Faculty.findById(toId).then((results) => {
        io.emit('pre-chat', results)
      })
      Student.findById(userId).then((results) => {
        io.emit('pre-chat', results)
      })
    }
    else {
      Student.findById(toId).then((results) => {
        io.emit('pre-chat', results)
      })
      Faculty.findById(userId).then((results) => {
        io.emit('pre-chat', results)
      })
    }
    io.emit('chat message', msg);
  });
});











/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
